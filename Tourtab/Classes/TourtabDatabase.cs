#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:2.0.50727.8689
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tourtab
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class TourtabDb : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClub(Club instance);
    partial void UpdateClub(Club instance);
    partial void DeleteClub(Club instance);
    partial void InsertHuman(Human instance);
    partial void UpdateHuman(Human instance);
    partial void DeleteHuman(Human instance);
    partial void InsertLocation(Location instance);
    partial void UpdateLocation(Location instance);
    partial void DeleteLocation(Location instance);
    partial void InsertMatch(Match instance);
    partial void UpdateMatch(Match instance);
    partial void DeleteMatch(Match instance);
    partial void InsertOrganizators(Organizators instance);
    partial void UpdateOrganizators(Organizators instance);
    partial void DeleteOrganizators(Organizators instance);
    partial void InsertParticipant(Participant instance);
    partial void UpdateParticipant(Participant instance);
    partial void DeleteParticipant(Participant instance);
    partial void InsertSport(Sport instance);
    partial void UpdateSport(Sport instance);
    partial void DeleteSport(Sport instance);
    partial void InsertTeam(Team instance);
    partial void UpdateTeam(Team instance);
    partial void DeleteTeam(Team instance);
    partial void InsertTournament(Tournament instance);
    partial void UpdateTournament(Tournament instance);
    partial void DeleteTournament(Tournament instance);
    #endregion
		
		public TourtabDb(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TourtabDb(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TourtabDb(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public TourtabDb(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Club> Club
		{
			get
			{
				return this.GetTable<Club>();
			}
		}
		
		public System.Data.Linq.Table<Human> Human
		{
			get
			{
				return this.GetTable<Human>();
			}
		}
		
		public System.Data.Linq.Table<Location> Location
		{
			get
			{
				return this.GetTable<Location>();
			}
		}
		
		public System.Data.Linq.Table<Match> Match
		{
			get
			{
				return this.GetTable<Match>();
			}
		}
		
		public System.Data.Linq.Table<Organizators> Organizators
		{
			get
			{
				return this.GetTable<Organizators>();
			}
		}
		
		public System.Data.Linq.Table<Participant> Participant
		{
			get
			{
				return this.GetTable<Participant>();
			}
		}
		
		public System.Data.Linq.Table<Sport> Sport
		{
			get
			{
				return this.GetTable<Sport>();
			}
		}
		
		public System.Data.Linq.Table<Team> Team
		{
			get
			{
				return this.GetTable<Team>();
			}
		}
		
		public System.Data.Linq.Table<Tournament> Tournament
		{
			get
			{
				return this.GetTable<Tournament>();
			}
		}
	}
	
	[Table(Name="dbo.Club")]
	public partial class Club : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private EntitySet<Participant> _Participant;
		
		private EntitySet<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Club()
		{
			this._Participant = new EntitySet<Participant>(new Action<Participant>(this.attach_Participant), new Action<Participant>(this.detach_Participant));
			this._Team = new EntitySet<Team>(new Action<Team>(this.attach_Team), new Action<Team>(this.detach_Team));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="VarChar(254)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_PARTICIP_ASSOCIATI_CLUB", Storage="_Participant", ThisKey="Id", OtherKey="Club_id", DeleteRule="NO ACTION")]
		public EntitySet<Participant> Participant
		{
			get
			{
				return this._Participant;
			}
			set
			{
				this._Participant.Assign(value);
			}
		}
		
		[Association(Name="FK_TEAM_ASSOCIATI_CLUB", Storage="_Team", ThisKey="Id", OtherKey="Club_id", DeleteRule="NO ACTION")]
		public EntitySet<Team> Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				this._Team.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participant(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Participant(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Team(Team entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Team(Team entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
	}
	
	[Table(Name="dbo.Human")]
	public partial class Human : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Surname;
		
		private string _Name;
		
		private System.Nullable<int> _Age;
		
		private string _Address;
		
		private EntitySet<Organizators> _Organizators;
		
		private EntitySet<Participant> _Participant;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSurnameChanging(string value);
    partial void OnSurnameChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAgeChanging(System.Nullable<int> value);
    partial void OnAgeChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    #endregion
		
		public Human()
		{
			this._Organizators = new EntitySet<Organizators>(new Action<Organizators>(this.attach_Organizators), new Action<Organizators>(this.detach_Organizators));
			this._Participant = new EntitySet<Participant>(new Action<Participant>(this.attach_Participant), new Action<Participant>(this.detach_Participant));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="surname", Storage="_Surname", DbType="VarChar(254)")]
		public string Surname
		{
			get
			{
				return this._Surname;
			}
			set
			{
				if ((this._Surname != value))
				{
					this.OnSurnameChanging(value);
					this.SendPropertyChanging();
					this._Surname = value;
					this.SendPropertyChanged("Surname");
					this.OnSurnameChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="VarChar(254)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="age", Storage="_Age", DbType="Int")]
		public System.Nullable<int> Age
		{
			get
			{
				return this._Age;
			}
			set
			{
				if ((this._Age != value))
				{
					this.OnAgeChanging(value);
					this.SendPropertyChanging();
					this._Age = value;
					this.SendPropertyChanged("Age");
					this.OnAgeChanged();
				}
			}
		}
		
		[Column(Name="address", Storage="_Address", DbType="VarChar(254)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[Association(Name="FK_ORGANIZA_GENERALIZ_HUMAN", Storage="_Organizators", ThisKey="Id", OtherKey="Human_id", DeleteRule="NO ACTION")]
		public EntitySet<Organizators> Organizators
		{
			get
			{
				return this._Organizators;
			}
			set
			{
				this._Organizators.Assign(value);
			}
		}
		
		[Association(Name="FK_PARTICIP_GENERALIZ_HUMAN", Storage="_Participant", ThisKey="Id", OtherKey="Human_id", DeleteRule="NO ACTION")]
		public EntitySet<Participant> Participant
		{
			get
			{
				return this._Participant;
			}
			set
			{
				this._Participant.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Organizators(Organizators entity)
		{
			this.SendPropertyChanging();
			entity.Human = this;
		}
		
		private void detach_Organizators(Organizators entity)
		{
			this.SendPropertyChanging();
			entity.Human = null;
		}
		
		private void attach_Participant(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Human = this;
		}
		
		private void detach_Participant(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Human = null;
		}
	}
	
	[Table(Name="dbo.Location")]
	public partial class Location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Place;
		
		private System.Nullable<System.DateTime> _Date;
		
		private EntitySet<Match> _Match;
		
		private EntitySet<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPlaceChanging(string value);
    partial void OnPlaceChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    #endregion
		
		public Location()
		{
			this._Match = new EntitySet<Match>(new Action<Match>(this.attach_Match), new Action<Match>(this.detach_Match));
			this._Tournament = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournament), new Action<Tournament>(this.detach_Tournament));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="place", Storage="_Place", DbType="VarChar(254)")]
		public string Place
		{
			get
			{
				return this._Place;
			}
			set
			{
				if ((this._Place != value))
				{
					this.OnPlaceChanging(value);
					this.SendPropertyChanging();
					this._Place = value;
					this.SendPropertyChanged("Place");
					this.OnPlaceChanged();
				}
			}
		}
		
		[Column(Name="date", Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Association(Name="FK_MATCH_REFERENCE_LOCATION", Storage="_Match", ThisKey="Id", OtherKey="Location_id", DeleteRule="NO ACTION")]
		public EntitySet<Match> Match
		{
			get
			{
				return this._Match;
			}
			set
			{
				this._Match.Assign(value);
			}
		}
		
		[Association(Name="FK_TOURNAME_REFERENCE_LOCATION", Storage="_Tournament", ThisKey="Id", OtherKey="Location_id", DeleteRule="NO ACTION")]
		public EntitySet<Tournament> Tournament
		{
			get
			{
				return this._Tournament;
			}
			set
			{
				this._Tournament.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Match(Match entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Match(Match entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
		
		private void attach_Tournament(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Location = this;
		}
		
		private void detach_Tournament(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Location = null;
		}
	}
	
	[Table(Name="dbo.Match")]
	public partial class Match : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _Sport_id;
		
		private System.Nullable<long> _Location_id;
		
		private System.Nullable<long> _Tournament_id;
		
		private System.Nullable<int> _Round_count;
		
		private EntityRef<Sport> _Sport;
		
		private EntityRef<Tournament> _Tournament;
		
		private EntityRef<Location> _Location;
		
		private EntitySet<Participant> _Participant;
		
		private EntitySet<Team> _Team;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSport_idChanging(System.Nullable<long> value);
    partial void OnSport_idChanged();
    partial void OnLocation_idChanging(System.Nullable<long> value);
    partial void OnLocation_idChanged();
    partial void OnTournament_idChanging(System.Nullable<long> value);
    partial void OnTournament_idChanged();
    partial void OnRound_countChanging(System.Nullable<int> value);
    partial void OnRound_countChanged();
    #endregion
		
		public Match()
		{
			this._Sport = default(EntityRef<Sport>);
			this._Tournament = default(EntityRef<Tournament>);
			this._Location = default(EntityRef<Location>);
			this._Participant = new EntitySet<Participant>(new Action<Participant>(this.attach_Participant), new Action<Participant>(this.detach_Participant));
			this._Team = new EntitySet<Team>(new Action<Team>(this.attach_Team), new Action<Team>(this.detach_Team));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="sport_id", Storage="_Sport_id", DbType="BigInt")]
		public System.Nullable<long> Sport_id
		{
			get
			{
				return this._Sport_id;
			}
			set
			{
				if ((this._Sport_id != value))
				{
					this.OnSport_idChanging(value);
					this.SendPropertyChanging();
					this._Sport_id = value;
					this.SendPropertyChanged("Sport_id");
					this.OnSport_idChanged();
				}
			}
		}
		
		[Column(Name="location_id", Storage="_Location_id", DbType="BigInt")]
		public System.Nullable<long> Location_id
		{
			get
			{
				return this._Location_id;
			}
			set
			{
				if ((this._Location_id != value))
				{
					this.OnLocation_idChanging(value);
					this.SendPropertyChanging();
					this._Location_id = value;
					this.SendPropertyChanged("Location_id");
					this.OnLocation_idChanged();
				}
			}
		}
		
		[Column(Name="tournament_id", Storage="_Tournament_id", DbType="BigInt")]
		public System.Nullable<long> Tournament_id
		{
			get
			{
				return this._Tournament_id;
			}
			set
			{
				if ((this._Tournament_id != value))
				{
					this.OnTournament_idChanging(value);
					this.SendPropertyChanging();
					this._Tournament_id = value;
					this.SendPropertyChanged("Tournament_id");
					this.OnTournament_idChanged();
				}
			}
		}
		
		[Column(Name="round_count", Storage="_Round_count", DbType="Int")]
		public System.Nullable<int> Round_count
		{
			get
			{
				return this._Round_count;
			}
			set
			{
				if ((this._Round_count != value))
				{
					this.OnRound_countChanging(value);
					this.SendPropertyChanging();
					this._Round_count = value;
					this.SendPropertyChanged("Round_count");
					this.OnRound_countChanged();
				}
			}
		}
		
		[Association(Name="FK_MATCH_ASSOCIATI_SPORT", Storage="_Sport", ThisKey="Sport_id", OtherKey="Id", IsForeignKey=true)]
		public Sport Sport
		{
			get
			{
				return this._Sport.Entity;
			}
			set
			{
				Sport previousValue = this._Sport.Entity;
				if (((previousValue != value) 
							|| (this._Sport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sport.Entity = null;
						previousValue.Match.Remove(this);
					}
					this._Sport.Entity = value;
					if ((value != null))
					{
						value.Match.Add(this);
						this._Sport_id = value.Id;
					}
					else
					{
						this._Sport_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Sport");
				}
			}
		}
		
		[Association(Name="FK_MATCH_ASSOCIATI_TOURNAME", Storage="_Tournament", ThisKey="Tournament_id", OtherKey="Id", IsForeignKey=true)]
		public Tournament Tournament
		{
			get
			{
				return this._Tournament.Entity;
			}
			set
			{
				Tournament previousValue = this._Tournament.Entity;
				if (((previousValue != value) 
							|| (this._Tournament.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tournament.Entity = null;
						previousValue.MATCH_ASSOCIATI_TOURNAME.Remove(this);
					}
					this._Tournament.Entity = value;
					if ((value != null))
					{
						value.MATCH_ASSOCIATI_TOURNAME.Add(this);
						this._Tournament_id = value.Id;
					}
					else
					{
						this._Tournament_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Tournament");
				}
			}
		}
		
		[Association(Name="FK_MATCH_REFERENCE_LOCATION", Storage="_Location", ThisKey="Location_id", OtherKey="Id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Match.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Match.Add(this);
						this._Location_id = value.Id;
					}
					else
					{
						this._Location_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[Association(Name="FK_PARTICIP_ASSOCIATI_MATCH", Storage="_Participant", ThisKey="Id", OtherKey="Match_id", DeleteRule="NO ACTION")]
		public EntitySet<Participant> Participant
		{
			get
			{
				return this._Participant;
			}
			set
			{
				this._Participant.Assign(value);
			}
		}
		
		[Association(Name="FK_TEAM_ASSOCIATI_MATCH", Storage="_Team", ThisKey="Id", OtherKey="Match_id", DeleteRule="NO ACTION")]
		public EntitySet<Team> Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				this._Team.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participant(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Participant(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
		
		private void attach_Team(Team entity)
		{
			this.SendPropertyChanging();
			entity.Match = this;
		}
		
		private void detach_Team(Team entity)
		{
			this.SendPropertyChanging();
			entity.Match = null;
		}
	}
	
	[Table(Name="dbo.Organizators")]
	public partial class Organizators : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _Human_id;
		
		private System.Nullable<bool> _Is_admin;
		
		private string _Judge;
		
		private string _Login;
		
		private string _Password;
		
		private EntityRef<Human> _Human;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnHuman_idChanging(System.Nullable<long> value);
    partial void OnHuman_idChanged();
    partial void OnIs_adminChanging(System.Nullable<bool> value);
    partial void OnIs_adminChanged();
    partial void OnJudgeChanging(string value);
    partial void OnJudgeChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public Organizators()
		{
			this._Human = default(EntityRef<Human>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="human_id", Storage="_Human_id", DbType="BigInt")]
		public System.Nullable<long> Human_id
		{
			get
			{
				return this._Human_id;
			}
			set
			{
				if ((this._Human_id != value))
				{
					this.OnHuman_idChanging(value);
					this.SendPropertyChanging();
					this._Human_id = value;
					this.SendPropertyChanged("Human_id");
					this.OnHuman_idChanged();
				}
			}
		}
		
		[Column(Name="is_admin", Storage="_Is_admin", DbType="Bit")]
		public System.Nullable<bool> Is_admin
		{
			get
			{
				return this._Is_admin;
			}
			set
			{
				if ((this._Is_admin != value))
				{
					this.OnIs_adminChanging(value);
					this.SendPropertyChanging();
					this._Is_admin = value;
					this.SendPropertyChanged("Is_admin");
					this.OnIs_adminChanged();
				}
			}
		}
		
		[Column(Name="judge", Storage="_Judge", DbType="VarChar(254)")]
		public string Judge
		{
			get
			{
				return this._Judge;
			}
			set
			{
				if ((this._Judge != value))
				{
					this.OnJudgeChanging(value);
					this.SendPropertyChanging();
					this._Judge = value;
					this.SendPropertyChanged("Judge");
					this.OnJudgeChanged();
				}
			}
		}
		
		[Column(Name="login", Storage="_Login", DbType="VarChar(254)")]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[Column(Name="password", Storage="_Password", DbType="VarChar(254)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Association(Name="FK_ORGANIZA_GENERALIZ_HUMAN", Storage="_Human", ThisKey="Human_id", OtherKey="Id", IsForeignKey=true)]
		public Human Human
		{
			get
			{
				return this._Human.Entity;
			}
			set
			{
				Human previousValue = this._Human.Entity;
				if (((previousValue != value) 
							|| (this._Human.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Human.Entity = null;
						previousValue.Organizators.Remove(this);
					}
					this._Human.Entity = value;
					if ((value != null))
					{
						value.Organizators.Add(this);
						this._Human_id = value.Id;
					}
					else
					{
						this._Human_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Human");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Participant")]
	public partial class Participant : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _Human_id;
		
		private System.Nullable<long> _Club_id;
		
		private System.Nullable<long> _Match_id;
		
		private System.Nullable<long> _Team_id;
		
		private System.Nullable<int> _Weight;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<Match> _Match;
		
		private EntityRef<Team> _Team;
		
		private EntityRef<Human> _Human;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnHuman_idChanging(System.Nullable<long> value);
    partial void OnHuman_idChanged();
    partial void OnClub_idChanging(System.Nullable<long> value);
    partial void OnClub_idChanged();
    partial void OnMatch_idChanging(System.Nullable<long> value);
    partial void OnMatch_idChanged();
    partial void OnTeam_idChanging(System.Nullable<long> value);
    partial void OnTeam_idChanged();
    partial void OnWeightChanging(System.Nullable<int> value);
    partial void OnWeightChanged();
    #endregion
		
		public Participant()
		{
			this._Club = default(EntityRef<Club>);
			this._Match = default(EntityRef<Match>);
			this._Team = default(EntityRef<Team>);
			this._Human = default(EntityRef<Human>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="human_id", Storage="_Human_id", DbType="BigInt")]
		public System.Nullable<long> Human_id
		{
			get
			{
				return this._Human_id;
			}
			set
			{
				if ((this._Human_id != value))
				{
					this.OnHuman_idChanging(value);
					this.SendPropertyChanging();
					this._Human_id = value;
					this.SendPropertyChanged("Human_id");
					this.OnHuman_idChanged();
				}
			}
		}
		
		[Column(Name="club_id", Storage="_Club_id", DbType="BigInt")]
		public System.Nullable<long> Club_id
		{
			get
			{
				return this._Club_id;
			}
			set
			{
				if ((this._Club_id != value))
				{
					this.OnClub_idChanging(value);
					this.SendPropertyChanging();
					this._Club_id = value;
					this.SendPropertyChanged("Club_id");
					this.OnClub_idChanged();
				}
			}
		}
		
		[Column(Name="match_id", Storage="_Match_id", DbType="BigInt")]
		public System.Nullable<long> Match_id
		{
			get
			{
				return this._Match_id;
			}
			set
			{
				if ((this._Match_id != value))
				{
					this.OnMatch_idChanging(value);
					this.SendPropertyChanging();
					this._Match_id = value;
					this.SendPropertyChanged("Match_id");
					this.OnMatch_idChanged();
				}
			}
		}
		
		[Column(Name="team_id", Storage="_Team_id", DbType="BigInt")]
		public System.Nullable<long> Team_id
		{
			get
			{
				return this._Team_id;
			}
			set
			{
				if ((this._Team_id != value))
				{
					this.OnTeam_idChanging(value);
					this.SendPropertyChanging();
					this._Team_id = value;
					this.SendPropertyChanged("Team_id");
					this.OnTeam_idChanged();
				}
			}
		}
		
		[Column(Name="weight", Storage="_Weight", DbType="Int")]
		public System.Nullable<int> Weight
		{
			get
			{
				return this._Weight;
			}
			set
			{
				if ((this._Weight != value))
				{
					this.OnWeightChanging(value);
					this.SendPropertyChanging();
					this._Weight = value;
					this.SendPropertyChanged("Weight");
					this.OnWeightChanged();
				}
			}
		}
		
		[Association(Name="FK_PARTICIP_ASSOCIATI_CLUB", Storage="_Club", ThisKey="Club_id", OtherKey="Id", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Participant.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Participant.Add(this);
						this._Club_id = value.Id;
					}
					else
					{
						this._Club_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[Association(Name="FK_PARTICIP_ASSOCIATI_MATCH", Storage="_Match", ThisKey="Match_id", OtherKey="Id", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Participant.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Participant.Add(this);
						this._Match_id = value.Id;
					}
					else
					{
						this._Match_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		[Association(Name="FK_PARTICIP_ASSOCIATI_TEAM", Storage="_Team", ThisKey="Team_id", OtherKey="Id", IsForeignKey=true)]
		public Team Team
		{
			get
			{
				return this._Team.Entity;
			}
			set
			{
				Team previousValue = this._Team.Entity;
				if (((previousValue != value) 
							|| (this._Team.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Team.Entity = null;
						previousValue.Participant.Remove(this);
					}
					this._Team.Entity = value;
					if ((value != null))
					{
						value.Participant.Add(this);
						this._Team_id = value.Id;
					}
					else
					{
						this._Team_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Team");
				}
			}
		}
		
		[Association(Name="FK_PARTICIP_GENERALIZ_HUMAN", Storage="_Human", ThisKey="Human_id", OtherKey="Id", IsForeignKey=true)]
		public Human Human
		{
			get
			{
				return this._Human.Entity;
			}
			set
			{
				Human previousValue = this._Human.Entity;
				if (((previousValue != value) 
							|| (this._Human.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Human.Entity = null;
						previousValue.Participant.Remove(this);
					}
					this._Human.Entity = value;
					if ((value != null))
					{
						value.Participant.Add(this);
						this._Human_id = value.Id;
					}
					else
					{
						this._Human_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Human");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Sport")]
	public partial class Sport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Name;
		
		private string _Team;
		
		private EntitySet<Match> _Match;
		
		private EntitySet<Tournament> _Tournament;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnTeamChanging(string value);
    partial void OnTeamChanged();
    #endregion
		
		public Sport()
		{
			this._Match = new EntitySet<Match>(new Action<Match>(this.attach_Match), new Action<Match>(this.detach_Match));
			this._Tournament = new EntitySet<Tournament>(new Action<Tournament>(this.attach_Tournament), new Action<Tournament>(this.detach_Tournament));
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="VarChar(254)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="team", Storage="_Team", DbType="VarChar(254)")]
		public string Team
		{
			get
			{
				return this._Team;
			}
			set
			{
				if ((this._Team != value))
				{
					this.OnTeamChanging(value);
					this.SendPropertyChanging();
					this._Team = value;
					this.SendPropertyChanged("Team");
					this.OnTeamChanged();
				}
			}
		}
		
		[Association(Name="FK_MATCH_ASSOCIATI_SPORT", Storage="_Match", ThisKey="Id", OtherKey="Sport_id", DeleteRule="NO ACTION")]
		public EntitySet<Match> Match
		{
			get
			{
				return this._Match;
			}
			set
			{
				this._Match.Assign(value);
			}
		}
		
		[Association(Name="FK_TOURNAME_SPORTINTO_SPORT", Storage="_Tournament", ThisKey="Id", OtherKey="Sport_id", DeleteRule="NO ACTION")]
		public EntitySet<Tournament> Tournament
		{
			get
			{
				return this._Tournament;
			}
			set
			{
				this._Tournament.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Match(Match entity)
		{
			this.SendPropertyChanging();
			entity.Sport = this;
		}
		
		private void detach_Match(Match entity)
		{
			this.SendPropertyChanging();
			entity.Sport = null;
		}
		
		private void attach_Tournament(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Sport = this;
		}
		
		private void detach_Tournament(Tournament entity)
		{
			this.SendPropertyChanging();
			entity.Sport = null;
		}
	}
	
	[Table(Name="dbo.Team")]
	public partial class Team : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _Match_id;
		
		private string _Name;
		
		private System.Nullable<long> _Club_id;
		
		private System.Nullable<int> _Participant_count;
		
		private EntitySet<Participant> _Participant;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<Match> _Match;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnMatch_idChanging(System.Nullable<long> value);
    partial void OnMatch_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnClub_idChanging(System.Nullable<long> value);
    partial void OnClub_idChanged();
    partial void OnParticipant_countChanging(System.Nullable<int> value);
    partial void OnParticipant_countChanged();
    #endregion
		
		public Team()
		{
			this._Participant = new EntitySet<Participant>(new Action<Participant>(this.attach_Participant), new Action<Participant>(this.detach_Participant));
			this._Club = default(EntityRef<Club>);
			this._Match = default(EntityRef<Match>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="match_id", Storage="_Match_id", DbType="BigInt")]
		public System.Nullable<long> Match_id
		{
			get
			{
				return this._Match_id;
			}
			set
			{
				if ((this._Match_id != value))
				{
					this.OnMatch_idChanging(value);
					this.SendPropertyChanging();
					this._Match_id = value;
					this.SendPropertyChanged("Match_id");
					this.OnMatch_idChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="VarChar(254)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="club_id", Storage="_Club_id", DbType="BigInt")]
		public System.Nullable<long> Club_id
		{
			get
			{
				return this._Club_id;
			}
			set
			{
				if ((this._Club_id != value))
				{
					this.OnClub_idChanging(value);
					this.SendPropertyChanging();
					this._Club_id = value;
					this.SendPropertyChanged("Club_id");
					this.OnClub_idChanged();
				}
			}
		}
		
		[Column(Name="participant_count", Storage="_Participant_count", DbType="Int")]
		public System.Nullable<int> Participant_count
		{
			get
			{
				return this._Participant_count;
			}
			set
			{
				if ((this._Participant_count != value))
				{
					this.OnParticipant_countChanging(value);
					this.SendPropertyChanging();
					this._Participant_count = value;
					this.SendPropertyChanged("Participant_count");
					this.OnParticipant_countChanged();
				}
			}
		}
		
		[Association(Name="FK_PARTICIP_ASSOCIATI_TEAM", Storage="_Participant", ThisKey="Id", OtherKey="Team_id", DeleteRule="NO ACTION")]
		public EntitySet<Participant> Participant
		{
			get
			{
				return this._Participant;
			}
			set
			{
				this._Participant.Assign(value);
			}
		}
		
		[Association(Name="FK_TEAM_ASSOCIATI_CLUB", Storage="_Club", ThisKey="Club_id", OtherKey="Id", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Team.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Team.Add(this);
						this._Club_id = value.Id;
					}
					else
					{
						this._Club_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[Association(Name="FK_TEAM_ASSOCIATI_MATCH", Storage="_Match", ThisKey="Match_id", OtherKey="Id", IsForeignKey=true)]
		public Match Match
		{
			get
			{
				return this._Match.Entity;
			}
			set
			{
				Match previousValue = this._Match.Entity;
				if (((previousValue != value) 
							|| (this._Match.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Match.Entity = null;
						previousValue.Team.Remove(this);
					}
					this._Match.Entity = value;
					if ((value != null))
					{
						value.Team.Add(this);
						this._Match_id = value.Id;
					}
					else
					{
						this._Match_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Match");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Participant(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Team = this;
		}
		
		private void detach_Participant(Participant entity)
		{
			this.SendPropertyChanging();
			entity.Team = null;
		}
	}
	
	[Table(Name="dbo.Tournament")]
	public partial class Tournament : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _Sport_id;
		
		private System.Nullable<long> _Location_id;
		
		private System.Nullable<int> _Match;
		
		private string _Name;
		
		private EntitySet<Match> _MATCH_ASSOCIATI_TOURNAME;
		
		private EntityRef<Location> _Location;
		
		private EntityRef<Sport> _Sport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnSport_idChanging(System.Nullable<long> value);
    partial void OnSport_idChanged();
    partial void OnLocation_idChanging(System.Nullable<long> value);
    partial void OnLocation_idChanged();
    partial void OnMatchChanging(System.Nullable<int> value);
    partial void OnMatchChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Tournament()
		{
			this._MATCH_ASSOCIATI_TOURNAME = new EntitySet<Match>(new Action<Match>(this.attach_MATCH_ASSOCIATI_TOURNAME), new Action<Match>(this.detach_MATCH_ASSOCIATI_TOURNAME));
			this._Location = default(EntityRef<Location>);
			this._Sport = default(EntityRef<Sport>);
			OnCreated();
		}
		
		[Column(Name="id", Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[Column(Name="sport_id", Storage="_Sport_id", DbType="BigInt")]
		public System.Nullable<long> Sport_id
		{
			get
			{
				return this._Sport_id;
			}
			set
			{
				if ((this._Sport_id != value))
				{
					this.OnSport_idChanging(value);
					this.SendPropertyChanging();
					this._Sport_id = value;
					this.SendPropertyChanged("Sport_id");
					this.OnSport_idChanged();
				}
			}
		}
		
		[Column(Name="location_id", Storage="_Location_id", DbType="BigInt")]
		public System.Nullable<long> Location_id
		{
			get
			{
				return this._Location_id;
			}
			set
			{
				if ((this._Location_id != value))
				{
					this.OnLocation_idChanging(value);
					this.SendPropertyChanging();
					this._Location_id = value;
					this.SendPropertyChanged("Location_id");
					this.OnLocation_idChanged();
				}
			}
		}
		
		[Column(Name="match", Storage="_Match", DbType="Int")]
		public System.Nullable<int> Match
		{
			get
			{
				return this._Match;
			}
			set
			{
				if ((this._Match != value))
				{
					this.OnMatchChanging(value);
					this.SendPropertyChanging();
					this._Match = value;
					this.SendPropertyChanged("Match");
					this.OnMatchChanged();
				}
			}
		}
		
		[Column(Name="name", Storage="_Name", DbType="VarChar(254)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Association(Name="FK_MATCH_ASSOCIATI_TOURNAME", Storage="_MATCH_ASSOCIATI_TOURNAME", ThisKey="Id", OtherKey="Tournament_id", DeleteRule="NO ACTION")]
		public EntitySet<Match> MATCH_ASSOCIATI_TOURNAME
		{
			get
			{
				return this._MATCH_ASSOCIATI_TOURNAME;
			}
			set
			{
				this._MATCH_ASSOCIATI_TOURNAME.Assign(value);
			}
		}
		
		[Association(Name="FK_TOURNAME_REFERENCE_LOCATION", Storage="_Location", ThisKey="Location_id", OtherKey="Id", IsForeignKey=true)]
		public Location Location
		{
			get
			{
				return this._Location.Entity;
			}
			set
			{
				Location previousValue = this._Location.Entity;
				if (((previousValue != value) 
							|| (this._Location.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Location.Entity = null;
						previousValue.Tournament.Remove(this);
					}
					this._Location.Entity = value;
					if ((value != null))
					{
						value.Tournament.Add(this);
						this._Location_id = value.Id;
					}
					else
					{
						this._Location_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Location");
				}
			}
		}
		
		[Association(Name="FK_TOURNAME_SPORTINTO_SPORT", Storage="_Sport", ThisKey="Sport_id", OtherKey="Id", IsForeignKey=true)]
		public Sport Sport
		{
			get
			{
				return this._Sport.Entity;
			}
			set
			{
				Sport previousValue = this._Sport.Entity;
				if (((previousValue != value) 
							|| (this._Sport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Sport.Entity = null;
						previousValue.Tournament.Remove(this);
					}
					this._Sport.Entity = value;
					if ((value != null))
					{
						value.Tournament.Add(this);
						this._Sport_id = value.Id;
					}
					else
					{
						this._Sport_id = default(Nullable<long>);
					}
					this.SendPropertyChanged("Sport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MATCH_ASSOCIATI_TOURNAME(Match entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = this;
		}
		
		private void detach_MATCH_ASSOCIATI_TOURNAME(Match entity)
		{
			this.SendPropertyChanging();
			entity.Tournament = null;
		}
	}
}
#pragma warning restore 1591
